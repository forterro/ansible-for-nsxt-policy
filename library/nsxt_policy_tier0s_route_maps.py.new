#!/usr/bin/python
#
# Copyright (c) 2019 Forterro
# Copyright 2018 VMware, Inc.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
# BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

from __future__ import absolute_import, division, print_function

__metaclass__ = type


ANSIBLE_METADATA = {
    "metadata_version": "1.1",
    "status": ["preview"],
    "supported_by": "community",
}

DOCUMENTATION = """
---
module: nsxt_policy_tier0s_route_maps

short_description: Manage a tier0 locale service with policy APIS
description:

version_added: "2.9"

author: Olivier Gintrand

options:
  hostname:
    description: Deployed NSX manager hostname.
    required: true
    type: str
  username:
    description: The username to authenticate with the NSX manager.
    required: true
    type: str
  password:
    description: The password to authenticate with the NSX manager.
    required: true
    type: str
  validate_certs:
    description: Insecure connection to NSX manager.
    required: false
    default: true
    type: boolean
  port:
    description: NSX manager api port
    required: false
    default: 443
    type: int
  state:
    choices:
    - present
    - absent
    description:  "State can be either 'present' or 'absent'.
                  'present' is used to create or update resource.
                  'absent' is used to delete resource."
    required: true
    type: str
  display_name:
    description:  Identifier to use when displaying entity in logs or GUI
                  Maximum length: 255
    required: true
    type: str
  description:
    description: Description
    required: false
    type: str
  tier0:
    description: Identifier for concerned tier0 (display_name)
    required: true
    type: str
  entries:
    description:    Ordered list of route map entries.
                    Minimum items: 1
                    Maximum items: 1000
                    - action:
                        description: Action for the route map entry
                        required: true
                        choices:
                            - PERMIT
                            - DENY
                        type: string
                      community_list_matches:
                        description:    Community list match criteria for route map.
                                        Properties community_list_matches and prefix_list_matches are mutually
                                        exclusive and cannot be used in the same route map entry.
                                        - criteria:
                                            description:    Match criteria specified as a community list path or a regular
                                                            expression.
                                            required: true
                                            type: str
                                          match_operator:
                                            description:    Match operator for community list entries.
                                                            Not valid when a regular expression is specified for criteria.
                                            choices:
                                              - MATCH_ANY
                                              - MATCH_ALL
                                              - MATCH_EXACT
                                              - MATCH_COMMUNITY_REGEX
                                              - MATCH_LARGE_COMMUNITY_REGEX
                                            required: true
                                            type: str
                        required: false
                        type: list
                      prefix_list_matches:
                        description:    Prefix list match criteria for route map.
                                        Properties community_list_matches and prefix_list_matches are mutually
                                        exclusive and cannot be used in the same route map entry.
                        require: false
                        type: list
                      set:
                        description:    Set criteria for route map entry
                                        - as_path_prepend:
                                            description: AS path prepend to influence route selection.
                                            type: str
                                          community:
                                            description:    Set BGP regular or large community for matching routes. A maximum of one value for each community
                                                            type separated by space. Well-known community name, community value in aa:nn (2byte:2byte) format for regular
                                                            community and community value in aa:bb:nn (4byte:4byte:4byte) format for large community are supported.
                                            type: str
                                          local_preference:
                                            description:    Local preference indicates the degree of preference for one BGP route
                                                            over other BGP routes. The path with highest local preference is
                                                            preferred.
                                            type: int
                                            required: false
                                            default: 100
                                          med:
                                            description:    Multi exit descriminator (MED) is a hint to BGP neighbors about
                                                            the preferred path into an autonomous system (AS) that has multiple
                                                            entry points. A lower MED value is preferred over a higher value.
                                            type: int
                                          weight:
                                            description:    Weight is used to select a route when multiple routes are available
                                                            to the same network. Route with the highest weight is preferred.
                                            type: int

    required: true
    type: str
"""

EXAMPLES = """

nsxt_policy_tier0s_route_maps:
    hostname: "nsxvip.domain.local"
    username: "admin"
    password: "Vmware1!"
    validate_certs: false
    display_name: "external"
    description: "My first tier0s_route_maps automated created by Ansible for NSX-T policy"
    tier0: "my_tier0"

    <TO DO>
"""


RETURN = """# """

from ansible.module_utils.vmware_nsxt_policy_apis import (
    vmware_argument_spec,
    nsx_module_execution,
)
from ansible.module_utils.basic import AnsibleModule


def main():
    argument_spec = vmware_argument_spec()
    argument_spec.update(
        display_name=dict(required=True, type="str"),
        description=dict(required=False, type="str"),
        state=dict(required=True, choices=["present", "absent"]),
        tier0=dict(required=True, type="str"),
        entries=dict(required=True, type="list"),
    )

    module = AnsibleModule(argument_spec=argument_spec, supports_check_mode=True)

    api_endpoint = "route-maps"
    object_def = "route-map"
    api_params_to_remove = ["resource_type"]

    api_protected_params = ["ha_mode", "transit_subnets", "internal_transit_subnets"]

    # Define params from ansible to remove for correct object as nsx api object
    ansible_params_to_remove = ["tier0"]

    manager_url = "https://{}/policy/api/v1/infra/tier-0s/{}".format(
        module.params["hostname"], module.params["tier0"]
    )

    nsx_module_execution(
        module=module,
        manager_url=manager_url,
        api_endpoint=api_endpoint,
        object_def=object_def,
        api_params_to_remove=api_params_to_remove,
        api_protected_params=api_protected_params,
        ansible_params_to_remove=ansible_params_to_remove,
    )


if __name__ == "__main__":
    main()
